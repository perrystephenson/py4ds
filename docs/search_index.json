[
["index.html", "Python for Data Science 1 Introduction 1.1 What is Python? 1.2 Setting up Python 1.3 Getting Help", " Python for Data Science Perry Stephenson 2018-10-07 1 Introduction This book has a target audience of one person: myself. I’m writing it as a reference for myself as I learn Python and start to transition from being 100% R to more of a 50/50 language mix. I’m making it public for two reasons: It’s easier for me to access my notes from anywhere without a password It might be useful for someone else who’s trying to figure out how to do something in Python It’s eventually going to resemble an opinionated manual, where I thoroughly document the bits of the language that I think are worth using, and completely ignore the bits I don’t use. This may or may not be useful for other people! It’s also going to make a lot of comparisons between R and Python, for my benefit. 1.1 What is Python? Python is a language. IPython is an interactive shell (which is itself tautologous, as all shells are interactive, surely?). Python is the name of the language, and there are multiple implementations of Python, including CPython (the reference implementation), PyPy (a faster implemenetation), and more. This is different to R, which is both a language AND an implementation, meaning that the R language is defined by the behaviour of the R interpreter. R runs in both script mode and interactive mode, which is again a key difference. So Python is to R as IPython is to R as CPython is to R. Easy! 1.2 Setting up Python This is a Python book written in R Markdown. This means that all of the Python examples are being excuted via the reticulate package. The Python distribution for all of these examples is Anaconda Python (version 3.6), and the packages are being managed within a conda environment. I decided to use Conda to manage my Python environment based on the discussion in this blog post and to make sure that I had full control over the environment. To set up a new Macbook (MacOS Mojave) with Python, I: Visited https://www.anaconda.com/download/#macos in a web browser and downloaded the Python 3.6 installer, then installed it. Created a new conda environment for this project (conda create --name py4ds python=3.6) Installed numpy, pandas and matplotlib into the conda environment using conda activate py4ds then conda install numpy pandas matplotlib Configured reticulate to use the new environment (and load a package to force it to load this non-default environment) # R library(reticulate) use_condaenv(condaenv = &#39;py4ds&#39;, require = TRUE, conda = &#39;/Users/perrystephenson/anaconda3/bin/conda&#39;) import(&#39;pandas&#39;) ## Module(pandas) Now we can check that the correct version of Python is being used: # Python import sys print(sys.version) ## 3.6.6 |Anaconda, Inc.| (default, Jun 28 2018, 11:10:00) ## [GCC 4.2.1 Compatible Clang 4.0.1 (tags/RELEASE_401/final)] And to make sure everything is working properly, I’ll generate a plot with matplotlib. # Python import matplotlib.pyplot as plt plt.plot([0, 2, 1, 4]) plt.show() 1.3 Getting Help Getting help about a Python function is pretty easy, using the help(&lt;thing&gt;) syntax (for example help(len)). The documentation seems a bit sparse, so I suspect that Google is also a pretty good place to go when looking for help on a function or a feature. "],
["syntax.html", "2 Base Syntax 2.1 Types 2.2 Comments 2.3 Basic Operations 2.4 Strings 2.5 Type Casting 2.6 Lists / Arrays / Columns / Vectors 2.7 Indexing 2.8 Copy / Modify 2.9 Grouping 2.10 Missing values and extreme numbers 2.11 Booleans 2.12 Dictionaries 2.13 Functions 2.14 Methods 2.15 Namespaces", " 2 Base Syntax This chapter will cover the basics of Base Python, that is the syntax of the Python Interpreter without any non-bundled packages. Note Python does not automatically print the result of expressions. They must always be wrapped in a print() function call if you want them to be printed to the standard output. 2.1 Types Python is “dynamically typed” which means that it can automatically infer the types of variables, and these types can change throughout the course of your script. This is similar to R, but very different to C. To see the type of an object in Python, use type(var). x = 0.5 print(type(x)) ## &lt;class &#39;float&#39;&gt; 2.2 Comments Comments start with the hash #, just like in R and Bash. You can also use docstrings as the first statement inside a function - this is written like a multi-line comment which becomes the documentation for the function. # This is a comment &quot;&quot;&quot;This is a multi-line docstring &quot;&quot;&quot; 2.3 Basic Operations The standard operators are pretty straightforward (*, /, +, -), exponentiation is ** (i.e. 4**2) instead of ^. Assignment is = and function arguments are also passed via =. Equality tests use ==. print(2**2 == 4) ## True print(2 == 3) ## False 2.4 Strings Python accepts both single ' and double &quot; quotes. You can concatenate strings using the + operator - cool! Python does not automatically cast between strings and other types (booooooo) which means you have to cast it explicitly when you want to build error messages, turn strings into numeric types, etc. x = 0.75 msg = &#39;The value of x is &#39; + str(x) print(msg) ## The value of x is 0.75 2.5 Type Casting Python uses sensibly named functions to cast between different types, and does not do this automatically. For example, print('Hello number ' + 3) will not work, as you need to explicitly cast like this: print('Hello number ' + str(3)). The casting functions are named after the data types: int str float bool etc 2.6 Lists / Arrays / Columns / Vectors In R, if you define something using the inline notation c(1.73, 1.68, 1.71, 1.89) then you are creating an “atomic vector” (i.e. a vector containing only one type of data). In Python, if you define something using the inline notation [1.73, 1.68, 1.71, 1.89] then are creating a “list”. “List” seems to have the same meaning as R (can contain multiple types, can contain other lists, etc), so it is just the notation that differs. There is no base equivalent to the atomic vector in Python - it seems that this functionality is provided by the NumPy Array. my_list = [&#39;1&#39;, 2, 3.0, &#39;d&#39;] print(my_list) ## [&#39;1&#39;, 2, 3.0, &#39;d&#39;] You can also put lists inside lists: my_nested_list = [[&quot;Hello&quot;, 1],[&quot;World&quot;, 2]] print(my_nested_list) ## [[&#39;Hello&#39;, 1], [&#39;World&#39;, 2]] 2.7 Indexing Python uses 0-based indexing, whereas R uses 1-based indexing. If you want to select the 4th element in a vector, you would use index 4 in R (1,2,3,4), but index 3 in Python (0,1,2,3). The syntax for this in Python is the same as R - var[3]. Negative indices work very differently! In R, a negative index will return the vector with the specified item removed i.e. if you use var[-3] then you will get the vector without the third element. In Python however, it will select a single element by counting backwards. An index of -1 returns the final element (because you start at index zero and take one step backwards), -2 returns the second last element, and so on. Slicing works even more strangely in Python. Whilst in R, using index var[3:5] will return the 3rd, 4th and 5th elements, in Python this will only return the 4th and 5th elements. This is because the syntax in Python is [inclusive:exclusive] and because of 0-based indexing. One nice shortcut in Python (not present in R) is the [:n] and [n:] syntax. In the first case, the blank argument to the infix operator : is interpreted as a 0, and in the second case the blank argument is interpreted as the length of the vector (so that it will select the rest of the vector). Python lists can be joined using the + operator. example = [0,1,2] + [3,4] print(example) ## [0, 1, 2, 3, 4] Deleting elements is a bit different - you need to use del(var[3]) to remove an element from the list. del(example[3]) print(example) ## [0, 1, 2, 4] 2.8 Copy / Modify R has a nice “copy on modify” behaviour, which means that when you assign a list (or anything else) to a new variable, it doesn’t copy it until you make a change, at which point it saves a modified copy of that object. In Python however, the behaviour is different for different data types (booooooo). Lists, for example, are copied by reference, which means that changing an element in a “copied” list also changes the same element in the original list. To get around this you need to do something like y = list(x) or y = x[:] to explicitly copy all items from the list. x = [1,2,3,4] y = x y[2] = 5 print(x) ## [1, 2, 5, 4] x = [1,2,3,4] y = list(x); y[2] = 5 z = x[:]; z[2] = 5 print(x) ## [1, 2, 3, 4] 2.9 Grouping Python does not use braces - it uses indentation to group blocks of code. This is supposed to improve readability, but in practice it can be super messy. Can use spaces or tabs. if condition : execute this and this because we&#39;re still indented execute this regardless because we&#39;ve got no indent 2.10 Missing values and extreme numbers In R, you have NA (missing) and NULL (undefined, empty), NaN (not a number), and Inf (infinity). In Python, you have None, and numpy has numpy.nan (not a number). There is no equivalent to Inf, as it just raises an error. 2.11 Booleans In R, booleans are defined as TRUE and FALSE, with the shortcut T and F also commonly used. In Python, the booleans are simply defined as True and False. Boolean arithmetic is performed using the and and or keywords, corresponding to the &amp; and | operators in R. You can also use the not operator, which corresponds to ! in R. Booleans are a bit harder to work with when you’re using numpy arrays, because the base logic keywords are not vectorised. To work with numpy arrays, you have to use the built in numpy functions: np.logical_and() np.locical_or() np.locical_not() 2.12 Dictionaries Dictionaries don’t really exist in R, because the dictionary functionality (named elements) is available in both atomic vectors and lists. To create a dictionary in Python, you can use the following syntax: world = {&quot;afghanistan&quot;:30.55, &quot;albania&quot;:2.77, &quot;algeria&quot;:39.21} You can also do nested dictionaries - the keys are somewhat limited (they can be any immutable data type) but the values can be dictionaries if you want. You can retrieve the keys from a dictionary using the .keys() method, e.g. world.keys(). You can select elements from a dictionary using the key inside square brackets, e.g. world['albania'] print(world.keys()) ## dict_keys([&#39;afghanistan&#39;, &#39;albania&#39;, &#39;algeria&#39;]) print(world[&#39;albania&#39;]) ## 2.77 In many ways, dictionaries are like named lists in R. You can add elements to a dictionary using world['italy'] = 59.83 for example. You can also interrogate whether a key exists in a dictionary using the in operator, which is like the %in% operator from R. For example: print(&#39;albania&#39; in world) ## True print(&#39;moon&#39; in world) ## False 2.13 Functions Functions are defined using the keyword def, like so: def repeat(s, exclaim): &quot;&quot;&quot; Returns the string &#39;s&#39; repeated 3 times. If exclaim is true, add exclamation marks. &quot;&quot;&quot; result = s + s + s if exclaim: result = result + &#39;!!!&#39; return result print(repeat(&#39;ha&#39;, exclaim = True)) ## hahaha!!! A return statement appears to be compulsory in Python functions, unlike in R where it is not strictly required. Like in all other scripting languages, functions must be defined before they are used (i.e. earlier in the script). Importing modules is probably a sensible way to manage this. Function arguments look to be specified and evaluated similarly to R - you name the arguments and you can give them default values in the definition statement. When using the function you can resolve arguments by name or by order (but you cannot mix the two approaches), and there is no partial matching. 2.13.1 Lambda functions These are just like anonymous functions in R - you can define them inline and don’t necessarily need to provide a name. Useful to save typing, but also useful in the map() and functools.reduce() functions. my_glue_function = lambda a, b: a + &#39; &#39; + b + &quot;!&quot; print(my_glue_function(&quot;Hello&quot;, &quot;World&quot;)) ## Hello World! 2.14 Methods Python is a proper object-oriented (OO) language, unlike R which is a functional language with three different OO systems built on top of it. The Python model for objects and methods is most similar to R’s Reference Classes (RC) framework. In Python, methods belong to objects (you invoke them using object.method() notation), and behave according to the type of the object. Some methods can mutate the object they belong to, others do not, and there is no easy way to tell the difference without reading the documentation. 2.15 Namespaces If you have a module called binky.py and a function in that module called foo() then the fully qualified function name is binky.foo(). This is sort of like R’s :: notation (e.g. dplyr::select()) except that Python modules seem to typically be more light weight than R packages. "],
["importing-and-exporting.html", "3 Importing and Exporting 3.1 Opening Text Files 3.2 Relational Databases 3.3 Exotic Filetypes 3.4 Working with the file system", " 3 Importing and Exporting 3.1 Opening Text Files 3.1.1 Plain Text These are the easiest files to open. file = open(&#39;huck_finn.txt&#39;, mode=&#39;r&#39;) # &#39;r&#39; is to read text = file.read() file.close() The .read() method reads the entire file. You can also use .readline() which reads a line at a time. You can also manage files using a “context manager”: with open(&#39;huck_finn.txt&#39;, mode=&#39;r&#39;) as file : print(file.read()) This has the advantage that it doesn’t require you to close the connection at the end of the script. 3.1.2 Tabular Data 3.1.2.1 NumPy arrays import numpy as np data = np.loadtxt(&#39;MNIST.txt&#39;, delimiter=&#39;,&#39;) Some additional useful arguments include: skiprows - set to an integer (typically 1) to skip header rows usecols - pass a list of integers (e.g. usecols=[0,2]) to select specified columns dtype - numpy arrays must all be a single data type, so this lets you cast everything to a type (for example dtype=str) You can also load data with multiple data types using np.genfromtxt(), and if you pass the dtype=None argument then it will automatically detect column types for you. data = np.genfromtxt(&#39;titanic.csv&#39;, delimiter=&#39;,&#39;, names=True, dtype=None) When you do this, the result is a structured array rather than a 2d numpy array. This isn’t ideal, which is why pandas exists. Also note that the function np.recfromcsv() does the same as np.genfromtxt() except that it sets dtype=None, delimiter=',' and names=True by default - handy! 3.1.2.2 Pandas DataFrames These are the standard for almost all data work in Python. The Pandas chapter will include more information about how to work with DataFrames in Pandas. import pandas as pd data = pd.read_csv(&#39;winequality-red.csv&#39;) Key options include: sep - delimiter character nrows - specify the number of rows to read header - set to None (not 0!) if your data doesn’t have a header row na_values - strings to treat as missing values Pandas has some handy helpers, including: .head() - shows the top 5 rows `.values - returns a numpy array 3.2 Relational Databases 3.3 Exotic Filetypes 3.3.1 Excel import pandas as pd data = pd.ExcelFile(&#39;urbanpop.xlsx&#39;) print(data.sheet_names) df1 = data.parse(&#39;1960-1966&#39;) # sheet name as string, or index as float Key options include: skiprows - indexes of rows to skip - must be a list (zero indexed!) names - can be used to provide (or override) the row names parse_cols - can be used to specify which columns to import 3.3.2 Pickle (serialised) import pickle with open(&#39;data.pkl&#39;, &#39;rb&#39;) as file: d = pickle.load(file) 3.3.3 HDF5 HDF5 stands for Hierarchical Data Format 5. It’s the standard for storing large quantities of numerical data, and can scale to exabytes. import h5py data = h5py.File(&#39;LIGO_data.hdf5&#39;, &#39;r&#39;) # &#39;r&#39; is to read The file can look like a dict, and you can explore it using the same techniques: for key in data.keys() : print(key) Because it is hierarchical, you can drill down further to find out what is there: for key in data[&#39;meta&#39;].keys() : print(key) You can grab values using the .value attribute: strain = data[&#39;strain&#39;][&#39;Strain&#39;].value 3.4 Working with the file system You can programmatically interrogate the file system using the os package. import os wd = os.getcwd() os.listdir(wd) "],
["control-flow.html", "4 Control Flow 4.1 If statements 4.2 While loop 4.3 For loop 4.4 Error Handling 4.5 Iterators and Iterables 4.6 List Comprehensions 4.7 Generators", " 4 Control Flow Bottom line up front, Python is weird about groupings. Instead of using braces and making things clear and explicit, Python enforces indentation as a way of grouping code. What this means if you have both spaces and tabs is unclear, but it’s certainly going to get confusing. Add to this Python’s mixed bag when it comes to putting function arguments in brackets and we’ve got a real mess. 4.1 If statements The general syntax for an if statement is: if condition : execute this and this because we&#39;re still indented execute this regardless because we&#39;ve got no indent The general syntax for an if else statement is: if condition : execute this else : execute this The general syntax for an else if statement is: if condition : execute this elif condition : execute this else : execute this 4.2 While loop The general syntax for a while loop is: while condition : expression 4.3 For loop The general syntax for a for loop is: for var in seq : expression You can also do inline enumeration if you want to (to get access to the index as well as the value), but it’s a bit flimsy and hard to understand because it only exists in the for loop syntax (so you can’t easily debug how it works): for index, var in enumerate(seq): expression You can also iterate along multiple columns in nested lists: for room, area in house : expression To iterate through the rows of a pandas DataFrame, you can use the following: for lab, row in df.iterrows() : print(lab) # The row label print(row) # The pandas Series, i.e. a named list consisting of the row elements To iterate through key:value pairs in a dictionary, use: for key, val in dict.items() : print(key) # The key print(val) # The value 4.4 Error Handling Error handling in Python seems to be based on the try-except model. You can use this to control execution flow conditional on the type of error raised, and you can raise your own errors using the raise keyword. def sqrt(x) : &quot;&quot;&quot;Returns the square root of a number.&quot;&quot;&quot; try: if x &lt; 0 : raise ValueError(&#39;x must be non-negative&#39;) return x ** 0.5 except TypeError: # This section will execute if there is a TypeError print(&#39;x must be an int or a float&#39;) print(sqrt(4)) ## 2.0 print(sqrt(&#39;4&#39;)) ## x must be an int or a float ## None print(sqrt(-4)) ## ValueError: x must be non-negative ## ## Detailed traceback: ## File &quot;&lt;string&gt;&quot;, line 1, in &lt;module&gt; ## File &quot;&lt;string&gt;&quot;, line 5, in sqrt Amongst all the printout, you can see that this has indeed raised a ValueError with the error message specified. 4.5 Iterators and Iterables Examples include lists, strings, dictionaries, file connections They need to have an iter() method Applying iter() to an iterable creates an iterator Iterators need to have a next() method word = &quot;Dog&quot; it = iter(word) print(next(it)) ## D print(next(it)) ## o print(next(it)) ## g print(next(it)) ## StopIteration: ## ## Detailed traceback: ## File &quot;&lt;string&gt;&quot;, line 1, in &lt;module&gt; You can also use the “splat” operator to get all remaining elements. word = &quot;Hello&quot; it = iter(word) print(next(it)) ## H print(*it) ## e l l o 4.5.1 Enumerate The enumerate() function can be used to return an iterator which gives two values, the index and the value of the underlying iterable. words = [&quot;Hello&quot;, &quot;World&quot;, &quot;!!!&quot;] for i, x in enumerate(words) : print(i, x) ## 0 Hello ## 1 World ## 2 !!! 4.5.2 Zip The zip() function can be used to take two or more lists and “zip” them together into a single iterable. list1 = [0,1,2,3]; list2 = [10,11,12,13]; list3 = [20,21,22,23] for a, b, c in zip(list1, list2, list3) : print(a, b, c) ## 0 10 20 ## 1 11 21 ## 2 12 22 ## 3 13 23 You can also use the zip() function to unzip, by using the splat operator. tuple1 = (0,1,2,3); tuple2 = (10,11,12,13); z = zip(tuple1, tuple2) result1, result2 = zip(*z) print(result1 == tuple1) ## True print(result2 == tuple2) ## True 4.6 List Comprehensions List comprehensions collapse for loops for building lists into a single line. You can write a list comprehension over any iterable. The general structure is: &lt;result&gt; = [&lt;output expression&gt; for &lt;iterator variable&gt; in &lt;iterable&gt;] Some examples: nums = [12, 8, 21, 3, 16] new_nums = [num + 1 for num in nums] print(new_nums) ## [13, 9, 22, 4, 17] result = [num for num in range(11)] print(result) ## [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10] You can also use nested comprehensions by chaining multiple for statements together, but it starts to get a bit ugly. pairs = [(num1, num2) for num1 in range (0,2) for num2 in range (6,8)] print(pairs) ## [(0, 6), (0, 7), (1, 6), (1, 7)] You can also use conditionals within list comprehensions. The general syntax is: &lt;result&gt; = [&lt;output&gt; for &lt;ivar&gt; in &lt;iterable&gt; if &lt;condition&gt;] For example, to make a list of the squares of only even numbers, you could use: print([num ** 2 for num in range(10) if num % 2 == 0]) ## [0, 4, 16, 36, 64] You can also use conditionals on the output expression, with the general syntax &lt;result&gt; = [&lt;true output&gt; if &lt;condition&gt; else &lt;false output&gt; for &lt;ivar&gt; in &lt;iterable&gt;] For example, to square even numbers but not square odd numbers, you could use: print([num ** 2 if num % 2 == 0 else num for num in range(10)]) ## [0, 1, 4, 3, 16, 5, 36, 7, 64, 9] You can also create dictionary comprehensions using the same syntax. # Create a list of strings: fellowship fellowship = [&#39;frodo&#39;, &#39;samwise&#39;, &#39;merry&#39;, &#39;aragorn&#39;, &#39;legolas&#39;, &#39;boromir&#39;, &#39;gimli&#39;] # Create dict comprehension: new_fellowship new_fellowship = {member:len(member) for member in fellowship} # Print the new list print(new_fellowship) ## {&#39;frodo&#39;: 5, &#39;samwise&#39;: 7, &#39;merry&#39;: 5, &#39;aragorn&#39;: 7, &#39;legolas&#39;: 7, &#39;boromir&#39;: 7, &#39;gimli&#39;: 5} 4.7 Generators A generator is like a list comprehension, except that it does not store the list in memory. You can create a generator by replacing [] with () in any list comprehension statement. It behaves like any other iterator, except that the value is lazily evaluated - i.e. the elements of the sequence are only calculated at the time they’re needed. As a trivial example of why this could be useful, the following code will cause my Python session to crash: [num for num in range(10**1000000)] But I can comfortably create a generator which I can use as an iterable: it = (num for num in range(10**1000000)) print(it) ## &lt;generator object &lt;genexpr&gt; at 0x1220f0518&gt; You can also write generator functions which can include any arbitrary code. The only difference between normal functions and generator functions is that instead of using return to return all objects at once, a generator function will use yield multiple times throughout the execution of the function. When the generator function is iterated over, the function will run through the code until it hits yield, then it will return that value to the called (which most likely called next() on the iterator), and then pause execution. The next time next() is called, it will yield the next value, and so on until the generator function is exhausted (when the function finishes). def num_sequence(n) : i = 0 while i &lt; n : yield i i += 1 it = num_sequence(3) print(next(it)) ## 0 print(next(it)) ## 1 print(next(it)) ## 2 for num in num_sequence(3) : print(num) ## 0 ## 1 ## 2 "],
["scripting.html", "5 Scripting 5.1 Imports 5.2 Boilerplate", " 5 Scripting 5.1 Imports If you import a module using import sys, then you make the functions from sys available in your code using their fully qualified function names, e.g. sys.argv and sys.exit(). This is different to R, where using the library() function makes functions available using their short names, e.g. after calling library(dplyr) you can just call select(). To get this sort of behaviour in Python, some people use from sys import argv, exit which makes specified functions available using their short names. In general though, it makes sense to use fully qualified names unless they’re really long, in the same way that it makes sense to use functions in R using the :: notation. To save you a bit of typing, you can rename the imported packages using the import &lt;package&gt; as &lt;shortcut&gt; syntax, e.g. import numpy as np. Going further, you can even do things like from numpy import array as np_array to import specific functions and rename them all in one step. Python has a “standard library” of imports available, just like R. Some examples include sys, re and os. You can also import constants from packages - e.g. math.pi. Some important imports include: numpy, matplotlib, pandas. 5.2 Boilerplate #!/usr/bin/env python import sys def main(): print(&#39;Hello there&#39;, sys.argv[1]) if __name__ == &#39;__main__&#39;: main() In this example: the shebang will use the correct Python conda environment (based on whichever conda env is active when the script is executed) the package imports are included at the top of the file the main() function is the part of the code that should run when you execute the script from the command line The strange thing at the end calls the main() function "],
["numpy-numeric-python.html", "6 Numpy (Numeric Python) 6.1 Numpy arrays 6.2 Two dimensional numpy arrays", " 6 Numpy (Numeric Python) This is a package which provides some types and functions for maths. The key use of numpy is the numpy.array() function, which provides something similar to the c() function (atomic vector) in R. Unlike lists (in both R and Python), the numpy.array() function allows vectorised operations. By convention, numpy is normally imported as np. import numpy as np 6.1 Numpy arrays To create a numpy array: import numpy as np temp = np.array([1,2,3,4]) print(temp) ## [1 2 3 4] Note the strange bracket nesting - it looks like the array function takes a list as an argument, which means you need to use the square brackets to make a list, then pass this list as the argument to the array function. One dimensional numpy arrays are useful for R users, because they behave like atomic vectors in R; in fact numpy arrays are also atomic - they can only hold items with the same data type. 6.2 Two dimensional numpy arrays You can define n-dimensional numpy arrays using lists of lists. The highest level of the hierarchy is the first dimension of the n-dimensional array, the second level is the second dimension of the array, and so on. When working with a two dimensional array, this means that you can create a 2 row, 5 column numpy array using the following command: import numpy as np np_2d = np.array([[1, 2, 3, 4, 5 ], [6, 7, 8, 9, 10]]) print(np_2d) ## [[ 1 2 3 4 5] ## [ 6 7 8 9 10]] To interrogate the properties of the array you can use methods. For example, you can get the dimensions of the array using np_2d.shape - this would be written as dim(np_2d) in R. print(np_2d.shape) ## (2, 5) "],
["pandas.html", "7 Pandas 7.1 Creation 7.2 Subsetting 7.3 Reading in chunks", " 7 Pandas The pandas package was written by Wes McKinney (who seems to be Hadley Wickham’s counterpart for Python) and builds on top of the numpy package to provide DataFrames. 7.1 Creation To create a DataFrame manually: import pandas as pd dict = { &quot;country&quot;: [&#39;Brazil&#39;, &#39;Russia&#39;, &#39;India&#39;, &#39;China&#39;, &#39;South Africa&#39;], &quot;capital&quot;: [&#39;Brasilia&#39;, &#39;Moscow&#39;, &#39;New Delhi&#39;, &#39;Beijing&#39;, &#39;Pretoria&#39; ], &quot;area&quot;: [ 8.516, 17.10, 3.286, 9.597, 1.221 ], &quot;population&quot;: [ 200.4, 143.5, 1252, 1357, 52.98 ]} df = pd.DataFrame(dict) df.index = [&#39;BR&#39;, &#39;RU&#39;, &#39;IN&#39;, &#39;CH&#39;, &#39;SA&#39; ] print(df) ## country capital area population ## BR Brazil Brasilia 8.516 200.40 ## RU Russia Moscow 17.100 143.50 ## IN India New Delhi 3.286 1252.00 ## CH China Beijing 9.597 1357.00 ## SA South Africa Pretoria 1.221 52.98 Alternatively, if you have data in a CSV file you can import it using: df = pd.read_csv(&#39;&lt;path&gt;&#39;) # If there are no column names df = pd.read_csv(&#39;&lt;path&gt;&#39;, index_col = 0) # If there are column names 7.2 Subsetting To select a column in pandas, use df['country']. This returns a “pandas Series” object, which is like a 1D element of a data frame. If you want to get a data frame back instead of a series, use df[['country']]. This is the opposite of R, where the [[]] is used to drill down further than []. The reason for this is that [] defines a list in Python, so you’re really calling df[&lt;subset&gt;] where &lt;subset&gt; is a list of length 1. In R, the [[]] subset operator is actually a function, hence the differing behaviours. This means that subsetting for multiple columns in Python doesn’t take too much writing: df[['country', 'capital']]. Interestingly, and perhaps confusingly, if you provide a slice (range) to df[] then you will be subsetting on rows, not columns! Using df[1:4] selects the 2nd through 4th rows of the data frame. If you want to do anything more complex than this, it starts getting a bit weird, and you have to use the loc() method (which stands for “location”). To pull out a named row, you need to use the df.loc['RU'] syntax (which returns a Series object), or df.loc[['RU']] (which returns a DataFrame). You can also select multiple rows this way: df.loc[['RU', 'IN', 'CH']]. You can then extend this to subset on columns as well, which starts to look a bit more like R (and like the 2D numpy array): df.loc[['RU', 'IN', 'CH'], ['country', 'capital']]. If you want to use an index, then you can do the same thing with lists of integers passed to the iloc() method (which stands for index-location). It seems like you probably need to chain these functions together if you want to have a mix of subsetting approaches. 7.3 Reading in chunks You can use the chunksize argument to read a CSV file in chunks, then iterate over the chunks in a loop. This can be useful when you’re dealing with large amounts of data that won’t fit in memory. import pandas as pd result = [] for chunk in pd.read_csv(&#39;data.csv&#39;, chunksize = 1000) : result.append(sun(chunk[&#39;x&#39;])) total = sum(result) print(total) "],
["visualisation.html", "8 Visualisation 8.1 Matplotlib 8.2 Line Plot 8.3 Scatter Plot 8.4 Text 8.5 Histograms 8.6 Modifiers", " 8 Visualisation Visualisation in Python is a bit of a mixed bag, with techniques ranging all the way from “just as bad as base R” to “could one day get close to ggplot2”. 8.1 Matplotlib matplotlib has a sub-package called pyplot, and you will conventionally import this package as plt. import matplotlib.pyplot as plt When building plots with Matplotlib, you need to explicitly call plt.show() to print the plot to the console. If you want to clear the plot and start again you can use plt.clf(). 8.2 Line Plot For a simple line plot, you can use plt.plot(x, y) where x and y are the arrays/lists corresponding to the data points for the x and y axes. import matplotlib.pyplot as plt x_val = [0,1,2,3,4,5,6,7,8] y_val = [0,1,4,9,16,25,36,49,64] plt.plot(x_val, y_val) plt.show() 8.3 Scatter Plot Scatter plots are basically the same syntax as line plots, but with use the method plt.scatter(). import matplotlib.pyplot as plt x_val = [0,1,2,3,4,5,6,7,8] y_val = [0,1,4,9,16,25,36,49,64] plt.scatter(x_val, y_val) plt.show() Additional arguments include: s which gives the size of each point c which gives the colour of each point alpha which gives the opacity of each point 8.4 Text You can add text to plots using the plt.text() function. import matplotlib.pyplot as plt x_val = [0,1,2,3,4,5,6,7,8] y_val = [0,1,4,9,16,25,36,49,64] plt.scatter(x_val, y_val) plt.text(0, 30, &quot;Hello World!&quot;) plt.show() 8.5 Histograms Histograms are fairly straight-forward too: plt.hist(x, bins). import matplotlib.pyplot as plt x = [0,1,2,3,4,5,6,7,8,9,16,25,36,49,64] plt.hist(x, 5) plt.show() 8.6 Modifiers 8.6.1 Scales plt.xscale('log') converts the x scale to a logarithmic scale plt.yscale('log') plt.grid(True) displays the grid on the plot plt.yticks([0,1,2,3], [&quot;0&quot;, &quot;1B&quot;, &quot;2B&quot;, &quot;3B&quot;]) sets the Y axis ticks to the values given in the first argument, and sets the displayed strings on those ticks based on the second argument plt.xticks([1000, 10000, 100000], ['1k', '10k', '100k']) 8.6.2 Labels plt.xlabel('Year') sets the X axis label to “Year” plt.ylabel('Population') plt.title('World Population Projections') sets the title of the plot "]
]
